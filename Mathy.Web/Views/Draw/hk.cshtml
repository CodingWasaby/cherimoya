@{
    Layout = null;
}
@using Mathy.Model.Draw
@using Mathy.Maths
@using Newtonsoft.Json
@model  HK
@{
    var matrix = Model.Matrix as Matrix;
}
<!DOCTYPE html>
<html style="height: 100%">
<head>
    <meta charset="utf-8">
</head>
<body style="height: 100%; margin: 0">
    <div id="container" style="height: 100%"></div>
    <script type="text/javascript" src="http://echarts.baidu.com/gallery/vendors/echarts/echarts.min.js"></script>
    <script type="text/javascript">
        var dom = document.getElementById("container");
        var myChart = echarts.init(dom);
        var app = {};
        option = null;

        var matrix = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(matrix))');
        var rowCount =  @matrix.RowCount;
        var colCount = @matrix.ColumnCount;

        var xAxisData = [];
        var customData = [];
        var dataList = [];
        var hLine = [];
        var lLine = [];

        for (var c = 0; c < colCount; c++) {
            dataList.push([]);
        }

        for (var r = 0; r < rowCount; r++)
        {
            hLine.push('@Model.H');
            lLine.push('@Model.L');
            xAxisData.push(r+1);
            var customVal = [r];
            customData.push(customVal);
            var row = matrix.Rows[r];
            for (var j = 0; j < colCount; j++)
            {
                dataList[j].push(row[j]);
                customVal.push(row[j]);
            }
        }

        option = {
            tooltip: {
                trigger: 'axis'
            },
            toolbox: {
                show: true,
                feature: {
                    dataZoom: {
                        yAxisIndex: 'none'
                    },
                    dataView: { readOnly: true },
                    restore: {},
                    saveAsImage: {}
                }
            },
            xAxis: {
                data: xAxisData
            },
            yAxis: {},
            series: [{
                type: 'custom',
                itemStyle: {
                    normal: {
                        borderWidth: 2
                    }
                },
                data: customData,
                z: 100
            }                , {
                    name: 'H=' +@Model.H,
                    type: 'line',
                    data:hLine,
                    lineStyle: {
                        normal: {
                            width: 2,
                            type: 'dashed'
                        }
                    },
                    color: 'red'
                }, {
                    name: 'L='+ @Model.L,
                    type: 'line',
                    data: lLine,
                    lineStyle: {
                        normal: {
                            width: 2,
                            type: 'dashed'
                        }
                    },
                    color: 'red'
                }
            ].concat(echarts.util.map(dataList, function (data, index) {
                return {
                    type: 'bar',
                    barGap: 0.05,
                    name: '结果：'+(index+1),
                    itemStyle: {
                        normal: {
                            opacity: 0.7
                        }
                    },
                    color: 'black',
                    data: data
                };
            }))
        };
        if (option && typeof option === "object") {
            myChart.setOption(option, true);
        }
    </script>
</body>
</html>