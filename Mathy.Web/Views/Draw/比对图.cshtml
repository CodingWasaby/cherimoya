@{
    Layout = null;
}
@using Mathy.Model.Draw
@model Comparison
@{
    Layout = null;
    var datas = string.Join(",", Model.Datas);
}
<!DOCTYPE html>
<html style="height: 100%">
<head>
    <meta charset="utf-8">
</head>
<body style="height: 100%; margin: 0">
    <div id="container" style="height: 100%"></div>
    <script type="text/javascript" src="http://echarts.baidu.com/gallery/vendors/echarts/echarts.min.js"></script>
    <script type="text/javascript" src="http://echarts.baidu.com/gallery/vendors/echarts-gl/echarts-gl.min.js"></script>
    <script type="text/javascript" src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script type="text/javascript">
            var dom = document.getElementById("container");
            var myChart = echarts.init(dom);
            var app = {};
            option = null;
            function splitData() {
                var rawData = '@datas'.split(",");
                var categoryData = [];
                var values = [];
                var yDatas = [];
                for (var i = 0; i < rawData.length; i++) {
                    categoryData.push(i);
                    var rd = rawData[i].split(":");
                    var rdNew = [];
                    rdNew.push(i+1);
                    rdNew=  rdNew.concat(rd);
                    values.push(rdNew);
                    yDatas.push( parseInt( rd[0]) + parseInt(rd[1])+parseInt( rd[0])*0.1);
                            yDatas.push( parseInt( rd[0]) - parseInt(rd[1])-parseInt( rd[0])*0.1);
                }
                categoryData.push(rawData.length);
                categoryData.push(rawData.length + 1);
                yDatas.sort(function (a, b) {
                  return a-b;
                });
                return {
                    categoryData: categoryData,
                    values: values,
                    min:yDatas[0],
                    max:yDatas[yDatas.length-1]
                };
            }
        var data = splitData();
        function renderItem(params, api) {

                var xValue = api.value(0);
                var closePoint = api.coord([xValue, api.value(1)]);
                var lowPoint = api.coord([xValue, api.value(1)-api.value(2)]);
                var highPoint = api.coord([xValue, api.value(1)+ api.value(2)]);
            var style = api.style({
                stroke: api.visual('color'),
                lineWidth: 3
            });

                return {
                    type: 'group',
                    children: [{
                        type: 'line',
                        color: 'black',
                        shape: {
                            x1: lowPoint[0], y1: lowPoint[1],
                            x2: highPoint[0], y2: highPoint[1]
                        },
                        style: style
                    }, {
                        type: 'line',
                        shape: {
                            x1: closePoint[0], y1: closePoint[1],
                            x2: closePoint[0] - 3, y2: closePoint[1]
                        },
                        style: style,
                        label: {
                            show: true
                        }
                    }, {
                        type: 'line',
                        shape: {
                            x1: closePoint[0], y1: closePoint[1],
                            x2: closePoint[0] + 3, y2: closePoint[1]
                        },
                        style: style,
                        label: {
                            show: true
                        }
                    }]
                };
            }
            myChart.setOption(option = {
                backgroundColor: '#eee',
                animation: false,
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross'
                    },
                    backgroundColor: 'rgba(245, 245, 245, 0.8)',
                    borderWidth: 1,
                    borderColor: '#ccc',
                    padding: 10,
                    textStyle: {
                        color: '#000'
                    },
                    position: function (pos, params, el, elRect, size) {
                        var obj = { top: 10 };
                        obj[['left', 'right'][+(pos[0] < size.viewSize[0] / 2)]] = 30;
                        return obj;
                    },
                    extraCssText: 'width: 170px'
                },
                axisPointer: {
                    link: { xAxisIndex: 'all' },
                    label: {
                        backgroundColor: '#777'
                    }
                },
                toolbox: {
                    feature: {
                        saveAsImage: {}
                    }
                },
                xAxis: [
                    {
                        type: 'category',
                        data: data.categoryData,
                        scale: true,
                        boundaryGap: false,
                        axisLine: { onZero: false },
                        splitLine: { show: false },
                        splitNumber: 20,
                        min: 0,
                        max: data.categoryData.length,
                        axisPointer: {
                            z: 100
                        }
                    }
                ],
                yAxis: [
                    {
                        min: data.min,
                        max:data.max,
                        scale: true,
                        splitArea: {
                            show: true
                        }
                    }
                ],
                series: [
                    {
                        name: '比对图',
                        type: 'custom',
                        renderItem: renderItem,
                        dimensions: [null,'mean', 'std'],
                        encode: {
                            x: 0,
                            y: [1, 2],
                            tooltip: [1, 2]
                        },
                        data: data.values,

                    }
                ]
            }, true);
            if (option && typeof option === "object") {
                myChart.setOption(option, true);
            }
    </script>
</body>
</html>