dataSources参数是数据源的数组。数据源可以是点数据源、表达式数据源、蜡烛图数据源。所提供的数据源会被画到一张图上。一般可以在一张图上画多个图像。每个图像的颜色设置为各不相同，用来互相对比。例如，可以把一个函数和它的导函数图像同时绘制进行比较。

options参数是一个字典，用来指定绘制选项。字典的声明语法是{ key1: value1, ..., key_n: value_n }。参数可以选择：
@{.} xGridLine: [起始，结束，格长度]，指定X轴的刻度绘制方式
@{.} yGridLine: [起始，结束，格长度]，指定Y轴的刻度绘制方式
@{.} margin: [左，上，右，下]，图像的外边界
@{.} padding: [左，上，右，下]，图像的内边界
options也可以不提供，使用空字典{}即可。如果不指定的话，会自动进行刻度轴的绘制。

后两个参数是图片的宽度和高度。

@{ex}
@<
x=@[1,2,3,4,5,6;2,3,4,5,6,7;25,6,7,8,9,10;1,2,3,4,5,6;2,3,4,5,6,7;75,6,7,8,9,10;1,2,3,4,5,6;2,3,4,5,6,7;95,6,7,8,9,10];
x1=map(x, row->[average(row),stdvar(row)]);
x2=map(x1, row->[row[0],row[0]-row[1],row[0]+row[1]]);
d=transpose(map(x1, (row, index)->[index+1,row[0]]));
#{b0,b1}=slreg(d);
#{a,b,r}=lsp(d);
graph=draw([candleStick(x2, "#000000"), expression(d[1,1], d[1,columnCount(d)], @i:double->b0+i*b1, "#ff0000"), expression(d[1,1], d[1,columnCount(d)], @i:double->a+i*b, "#000000")], {xGridLine:[1,rowCount(x),1],margin:[40,20,20,20],padding:[20,20,20,20]}, 600, 500)
@>
该例子比较好的演示了如何准备数据源并使用draw函数。
首先x是一个矩阵，每一行表示一组样本。x1是对x进行映射，产生的一个新矩阵，每一行的两个元素为对应样本的均值和标准差。x2则产生一个蜡烛图矩阵。draw函数对蜡烛图以及简单线性回归和最小二乘线性回归进行了绘制。